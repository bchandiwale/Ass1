name: Deploy to AWS Apprunner Service

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]  

env:
  AWS_REGION: ap-south-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: node-service     # set this to your Amazon ECR repository name
  PREPROD_APPRUNNER_SERVICE: actions_service

permissions:
  contents: read

jobs:
  AWSLogin:
    name: AWSLogin
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3


  DeployPreProd:
    name: Deploy to staging environment
    needs: [AWSLogin]
    runs-on: ubuntu-latest
    environment:
      name: Preprod
      url: 'https://community.testpersistent.com/'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'false'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          DEPLOY_ENV: 'PREPROD'
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo "registry: $ECR_REGISTRY"
          pwd
          ls -la
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg DEPLOY_ENV=$DEPLOY_ENV .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          #echo "image={$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG}" >> $GITHUB_OUTPUT

               
  
